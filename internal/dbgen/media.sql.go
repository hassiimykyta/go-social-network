// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package dbgen

import (
	"context"
	"database/sql"
)

const attachMediaToPost = `-- name: AttachMediaToPost :exec
INSERT INTO post_media (post_id, media_id, position)
VALUES ($1, $2, $3)
ON CONFLICT (post_id, media_id)
DO UPDATE SET position = EXCLUDED.position
`

type AttachMediaToPostParams struct {
	PostID   int64
	MediaID  int64
	Position int32
}

func (q *Queries) AttachMediaToPost(ctx context.Context, arg AttachMediaToPostParams) error {
	_, err := q.db.ExecContext(ctx, attachMediaToPost, arg.PostID, arg.MediaID, arg.Position)
	return err
}

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (
  owner_id, kind, storage_key, mime_type, size_bytes, width, height, duration_ms
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING media.id, media.owner_id, media.kind, media.storage_key, media.mime_type, media.size_bytes, media.width, media.height, media.duration_ms, media.created_at, media.deleted_at
`

type CreateMediaParams struct {
	OwnerID    int64
	Kind       string
	StorageKey string
	MimeType   string
	SizeBytes  int64
	Width      sql.NullInt32
	Height     sql.NullInt32
	DurationMs sql.NullInt32
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.db.QueryRowContext(ctx, createMedia,
		arg.OwnerID,
		arg.Kind,
		arg.StorageKey,
		arg.MimeType,
		arg.SizeBytes,
		arg.Width,
		arg.Height,
		arg.DurationMs,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Kind,
		&i.StorageKey,
		&i.MimeType,
		&i.SizeBytes,
		&i.Width,
		&i.Height,
		&i.DurationMs,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
