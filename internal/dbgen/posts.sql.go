// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package dbgen

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
insert into posts (title, description, user_id)
values ($1, $2, $3)
returning posts.id, posts.title, posts.description, posts.user_id, posts.created_at, posts.updated_at, posts.deleted_at
`

type CreatePostParams struct {
	Title       string
	Description string
	UserID      int64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Description, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllPostsByUser = `-- name: GetAllPostsByUser :many
select posts.id, posts.title, posts.description, posts.user_id, posts.created_at, posts.updated_at, posts.deleted_at
from posts
where user_id = $1
and deleted_at is null
order by created_at desc, id desc
`

func (q *Queries) GetAllPostsByUser(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsPaginated = `-- name: ListPostsPaginated :many
select posts.id, posts.title, posts.description, posts.user_id, posts.created_at, posts.updated_at, posts.deleted_at
from posts
where deleted_at is null
order by created_at desc, id desc
limit $1 offset $2
`

type ListPostsPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPostsPaginated(ctx context.Context, arg ListPostsPaginatedParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPostsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeletePost = `-- name: SoftDeletePost :exec
update posts
set deleted_at = now()
where id = $1 and deleted_at is null
`

func (q *Queries) SoftDeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDeletePost, id)
	return err
}

const updatePostPartial = `-- name: UpdatePostPartial :one
update posts
set title = coalesce($1, title),
description = coalesce ($2, description)
where id = $3
and deleted_at is null
returning posts.id, posts.title, posts.description, posts.user_id, posts.created_at, posts.updated_at, posts.deleted_at
`

type UpdatePostPartialParams struct {
	Title       sql.NullString
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdatePostPartial(ctx context.Context, arg UpdatePostPartialParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostPartial, arg.Title, arg.Description, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
